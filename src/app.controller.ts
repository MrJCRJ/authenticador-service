// src/app.controller.ts

// Importa o decorador `Controller` e `Get` do pacote @nestjs/common.
// `Controller` √© usado para definir uma classe como um controlador no NestJS.
// `Get` √© um decorador que define um m√©todo para lidar com requisi√ß√µes HTTP GET.
import { Controller, Get, Logger } from '@nestjs/common';

// Define a classe `AppController` como um controlador usando o decorador @Controller.
// O decorador @Controller pode receber um prefixo de rota como argumento (por exemplo, @Controller('api')).
// Se nenhum prefixo for fornecido, as rotas definidas neste controlador ser√£o acess√≠veis a partir da raiz da aplica√ß√£o.
@Controller()
export class AppController {
  // Logger personalizado para o AppController, com emojis para logs divertidos e intuitivos üéâ
  private readonly logger = new Logger(AppController.name);

  /**
   * Rota raiz da aplica√ß√£o.
   * Responde a requisi√ß√µes HTTP GET na rota '/' com uma mensagem de boas-vindas.
   *
   * @returns Uma string simples com a mensagem "Hello World!".
   */
  @Get()
  getHello(): string {
    // Log intuitivo: requisi√ß√£o recebida na rota raiz.
    this.logger.log('üåç Requisi√ß√£o GET recebida na rota raiz.');

    // Retorna uma string simples como resposta para a requisi√ß√£o GET.
    return 'Hello World!';
  }
}

/**Sugest√µes de Melhoria (Para Implementar):
Rota de Status da Aplica√ß√£o:

Adicione uma rota para verificar o status da aplica√ß√£o (health check).

typescript
Copy
@Get('status')
getStatus(): { status: string } {
  this.logger.log('ü©∫ Verificando status da aplica√ß√£o...');
  return { status: 'up' };
}
Documenta√ß√£o com Swagger:

Adicione anota√ß√µes do Swagger para documentar a API.

typescript
Copy
import { ApiOperation, ApiResponse } from '@nestjs/swagger';

@Get()
@ApiOperation({ summary: 'Retorna uma mensagem de boas-vindas' })
@ApiResponse({ status: 200, description: 'Mensagem de boas-vindas' })
getHello(): string {
  return 'Hello World!';
}
Tratamento de Erros:

Adicione um bloco try-catch para capturar e tratar poss√≠veis erros.

typescript
Copy
@Get()
getHello(): string {
  try {
    this.logger.log('üåç Requisi√ß√£o GET recebida na rota raiz.');
    return 'Hello World!';
  } catch (error) {
    this.logger.error(`üí• Erro ao processar requisi√ß√£o: ${error.message}`);
    throw error;
  }
}
Configura√ß√£o Din√¢mica:

Use o ConfigService para carregar mensagens dinamicamente.

typescript
Copy
constructor(private readonly configService: ConfigService) {}

@Get()
getHello(): string {
  return this.configService.get<string>('WELCOME_MESSAGE', 'Hello World!');
}
Testes Automatizados:

Adicione testes unit√°rios para garantir que o controlador funcione corretamente.

typescript
Copy
describe('AppController', () => {
  let appController: AppController;

  beforeEach(() => {
    appController = new AppController();
  });

  it('deve retornar "Hello World!"', () => {
    expect(appController.getHello()).toBe('Hello World!');
  });
});
Seguran√ßa:

Adicione prote√ß√£o contra ataques comuns (por exemplo, rate limiting).

typescript
Copy
import { Throttle } from '@nestjs/throttler';

@Throttle({ default: { limit: 10, ttl: 60 } }) // Limita a 10 requisi√ß√µes por minuto.
@Get()
getHello(): string {
  return 'Hello World!';
}
Exemplo de Sa√≠da de Logs:
Copy
üåç Requisi√ß√£o GET recebida na rota raiz. */
