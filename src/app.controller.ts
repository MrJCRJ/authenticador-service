// src/app.controller.ts
import { Controller, Get, Logger, Res, Req, UseGuards } from '@nestjs/common';
import { Response, Request } from 'express';
import { ConfigService } from '@nestjs/config';
import { Throttle, ThrottlerGuard } from '@nestjs/throttler';
import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';

@ApiTags('App')
@Controller()
export class AppController {
  private readonly logger = new Logger(AppController.name);

  constructor(private readonly configService: ConfigService) {}

  /**
   * Rota raiz da aplica√ß√£o com informa√ß√µes b√°sicas
   */
  @Get()
  @ApiOperation({ summary: 'Obter informa√ß√µes b√°sicas da aplica√ß√£o' })
  @ApiResponse({ status: 200, description: 'Informa√ß√µes da aplica√ß√£o' })
  @ApiResponse({ status: 500, description: 'Erro interno do servidor' })
  @UseGuards(ThrottlerGuard)
  @Throttle({ default: { limit: 100, ttl: 60 } }) // 100 requisi√ß√µes por minuto
  getAppInfo(@Req() req: Request, @Res() res: Response) {
    try {
      this.logger.log('üåç Requisi√ß√£o GET recebida na rota raiz');

      const appInfo = {
        status: 'online',
        environment: this.configService.get('NODE_ENV'),
        version: this.configService.get('APP_VERSION', '1.0.0'),
        session: req.session?.id ? 'active' : 'inactive',
        authEndpoints: {
          google: '/auth/google/init',
          profile: '/auth/profile',
          logout: '/auth/logout',
          refresh: '/auth/refresh',
        },
        docs: '/api-docs',
        uptime: process.uptime(),
      };

      this.logger.debug(`Informa√ß√µes da sess√£o: ${req.session?.id}`);
      this.logger.debug(`IP do cliente: ${req.ip}`);

      return res.json(appInfo);
    } catch (error) {
      this.logger.error(`üí• Erro na rota raiz: ${error}`);
      return res.status(500).json({
        error: 'Erro interno do servidor',
        message:
          this.configService.get('NODE_ENV') === 'development'
            ? error
            : undefined,
      });
    }
  }

  /**
   * Rota de health check para monitoramento
   */
  @Get('health')
  @ApiOperation({ summary: 'Verificar sa√∫de da aplica√ß√£o' })
  @ApiResponse({ status: 200, description: 'Aplica√ß√£o saud√°vel' })
  @Throttle({ default: { limit: 10, ttl: 60 } }) // 10 requisi√ß√µes por minuto
  getHealthCheck() {
    this.logger.log('ü©∫ Health check executado');
    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
      database: 'connected', // Adicione verifica√ß√µes reais de conex√£o
      memoryUsage: process.memoryUsage().rss,
    };
  }

  /**
   * Rota de informa√ß√µes de configura√ß√£o (apenas em desenvolvimento)
   */
  @Get('config')
  @ApiOperation({ summary: 'Obter configura√ß√µes (apenas desenvolvimento)' })
  @ApiResponse({ status: 200, description: 'Configura√ß√µes seguras' })
  @ApiResponse({ status: 403, description: 'Acesso negado em produ√ß√£o' })
  getConfig(@Res() res: Response) {
    try {
      if (this.configService.get('NODE_ENV') !== 'development') {
        this.logger.warn(
          '‚ö†Ô∏è Tentativa de acesso ao endpoint de configura√ß√£o em ambiente n√£o-desenvolvimento',
        );
        return res.status(403).json({
          error: 'Acesso negado',
          message:
            'Este endpoint est√° dispon√≠vel apenas em ambiente de desenvolvimento',
        });
      }

      this.logger.warn(
        '‚ö†Ô∏è Acesso ao endpoint de configura√ß√£o em desenvolvimento',
      );

      const safeConfig = {
        env: this.configService.get('NODE_ENV'),
        port: this.configService.get('PORT'),
        frontendUrls: this.configService.get('FRONTEND_URLS'),
        googleAuthConfigured: !!this.configService.get('GOOGLE_CLIENT_ID'),
        sessionSecretConfigured: !!this.configService.get('SESSION_SECRET'),
        jwtConfigured: !!this.configService.get('JWT_SECRET'),
        features: {
          throttling:
            this.configService.get('THROTTLE_ENABLED', 'true') === 'true',
          swagger: this.configService.get('SWAGGER_ENABLED', 'true') === 'true',
        },
      };

      return res.json(safeConfig);
    } catch (error) {
      this.logger.error(`üí• Erro no endpoint de configura√ß√£o: ${error}`);
      return res.status(500).json({
        error: 'Erro ao obter configura√ß√µes',
        details:
          this.configService.get('NODE_ENV') === 'development'
            ? error
            : undefined,
      });
    }
  }

  /**
   * Rota de status do sistema
   */
  @Get('status')
  @ApiOperation({ summary: 'Obter status detalhado do sistema' })
  @ApiResponse({ status: 200, description: 'Status do sistema' })
  @Throttle({ default: { limit: 30, ttl: 60 } }) // 30 requisi√ß√µes por minuto
  getSystemStatus() {
    this.logger.log('üìä Verificando status do sistema...');
    return {
      status: 'operational',
      timestamp: new Date().toISOString(),
      resources: {
        cpu: process.cpuUsage(),
        memory: process.memoryUsage(),
      },
      dependencies: {
        database: 'ok', // Substituir por verifica√ß√£o real
        cache: 'ok', // Substituir por verifica√ß√£o real
      },
    };
  }
}
