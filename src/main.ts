// src/main.ts

// Importa a fun√ß√£o NestFactory do pacote @nestjs/core, que √© usada para criar uma inst√¢ncia da aplica√ß√£o NestJS.
import { NestFactory } from '@nestjs/core';

// Importa o m√≥dulo principal da aplica√ß√£o, que cont√©m todos os controladores, provedores e outros m√≥dulos.
import { AppModule } from './app.module';

// Importa o cookie-parser para manipula√ß√£o de cookies.
import cookieParser from 'cookie-parser';

// Importa o Logger do NestJS para logs personalizados.
import { Logger } from '@nestjs/common';

// Fun√ß√£o ass√≠ncrona que inicializa a aplica√ß√£o.
async function bootstrap() {
  // Cria uma inst√¢ncia da aplica√ß√£o NestJS usando o m√≥dulo principal (AppModule).
  const app = await NestFactory.create(AppModule);

  // Logger personalizado para o bootstrap, com emojis para logs divertidos e intuitivos üéâ
  const logger = new Logger('Bootstrap');

  // Middleware para manipula√ß√£o de cookies.
  app.use(cookieParser());
  logger.log('üç™ Cookie-parser configurado com sucesso!');

  // Habilita o CORS (Cross-Origin Resource Sharing) para permitir requisi√ß√µes de diferentes origens.
  app.enableCors({
    origin: process.env.FRONTEND_URL || 'http://localhost:5500', // Permite requisi√ß√µes do frontend.
    credentials: true, // Permite o envio de cookies e headers de autentica√ß√£o.
  });
  logger.log('üåç CORS configurado com sucesso!');

  // Inicia o servidor HTTP e faz com que a aplica√ß√£o escute na porta especificada.
  // A porta √© obtida a partir da vari√°vel de ambiente PORT, ou usa 3000 como padr√£o caso PORT n√£o esteja definida.
  const port = process.env.PORT || 3000;
  await app.listen(port);

  // Exibe uma mensagem no console indicando que a aplica√ß√£o est√° rodando e em qual porta.
  logger.log(`üöÄ Aplica√ß√£o rodando em: ${await app.getUrl()}`);
}

// Chama a fun√ß√£o bootstrap para iniciar a aplica√ß√£o.
bootstrap().catch((error) => {
  // Log de erro caso ocorra algum problema durante a inicializa√ß√£o.
  const logger = new Logger('Bootstrap');
  logger.error(`üí• Falha ao iniciar a aplica√ß√£o: ${error.message}`);
  process.exit(1); // Encerra o processo com c√≥digo de erro.
});

/**Sugest√µes de Melhoria (Para Implementar):
Configura√ß√£o Din√¢mica:

Use o ConfigService para carregar configura√ß√µes dinamicamente (por exemplo, porta, URL do frontend).

typescript
Copy
const configService = app.get(ConfigService);
const port = configService.get<number>('PORT', 3000);
const frontendUrl = configService.get<string>('FRONTEND_URL', 'http://localhost:3000');
Documenta√ß√£o com Swagger:

Adicione o SwaggerModule para documentar a API.

typescript
Copy
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';

const config = new DocumentBuilder()
  .setTitle('API Documentation')
  .setDescription('Descri√ß√£o da API')
  .setVersion('1.0')
  .build();
const document = SwaggerModule.createDocument(app, config);
SwaggerModule.setup('api', app, document);
Seguran√ßa Adicional:

Adicione middlewares de seguran√ßa, como helmet e rate-limiting.

typescript
Copy
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

app.use(helmet());
app.use(
  rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 100, // Limite de 100 requisi√ß√µes por IP
  }),
);
Monitoramento:

Adicione suporte para ferramentas de monitoramento (por exemplo, Prometheus).

typescript
Copy
import { PrometheusModule } from '@willsoto/nestjs-prometheus';

app.use('/metrics', PrometheusModule.createHandler());
Testes Automatizados:

Adicione testes de integra√ß√£o para garantir que a aplica√ß√£o inicialize corretamente.

typescript
Copy
describe('Bootstrap', () => {
  it('deve iniciar a aplica√ß√£o sem erros', async () => {
    await expect(bootstrap()).resolves.not.toThrow();
  });
});
Logs Estruturados:

Use logs estruturados (em formato JSON) para facilitar a an√°lise em ferramentas de monitoramento.

typescript
Copy
logger.log({
  message: 'Aplica√ß√£o iniciada com sucesso',
  port,
  url: await app.getUrl(),
});
Exemplo de Sa√≠da de Logs:
Copy
üç™ Cookie-parser configurado com sucesso!
üåç CORS configurado com sucesso!
üöÄ Aplica√ß√£o rodando em: http://localhost:3000 */
