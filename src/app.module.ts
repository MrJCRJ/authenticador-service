// src/app.module.ts

import { Module, Logger } from '@nestjs/common';
import { AppController } from './app.controller';
import { AuthModule } from './auth/auth.module';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { PassportModule } from '@nestjs/passport';
import * as Joi from 'joi'; // Para valida√ß√£o de vari√°veis de ambiente

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: `.env.${process.env.NODE_ENV || 'development'}`,
      validationSchema: Joi.object({
        NODE_ENV: Joi.string()
          .valid('development', 'production', 'test')
          .default('development'),
        PORT: Joi.number().default(3000),
        SESSION_SECRET: Joi.string().required(),
        GOOGLE_CLIENT_ID: Joi.string().required(),
        GOOGLE_CLIENT_SECRET: Joi.string().required(),
        FRONTEND_URLS: Joi.string().required(),
        JWT_SECRET: Joi.string().required(),
      }),
      validationOptions: {
        allowUnknown: true,
        abortEarly: true,
      },
    }),

    // Configura√ß√£o global do Passport
    PassportModule.register({
      defaultStrategy: 'google',
      session: true,
    }),

    AuthModule,
  ],
  controllers: [AppController],
  providers: [],
})
export class AppModule {
  private readonly logger = new Logger(AppModule.name);

  constructor(private readonly configService: ConfigService) {
    this.logConfiguration();
  }

  private logConfiguration() {
    this.logger.log('üöÄ M√≥dulo principal da aplica√ß√£o carregado com sucesso!');
    this.logger.log(`üè∑Ô∏è Ambiente: ${this.configService.get('NODE_ENV')}`);
    this.logger.log(
      `üåç Frontend URLs: ${this.configService.get('FRONTEND_URLS')}`,
    );

    // Log seguro (n√£o mostra valores sens√≠veis)
    this.logger.log('üîë Configura√ß√£o do Google OAuth:');
    this.logger.log(
      `- Client ID: ${this.configService.get('GOOGLE_CLIENT_ID') ? '‚úîÔ∏è Configurado' : '‚ùå Ausente'}`,
    );
    this.logger.log(
      `- Client Secret: ${this.configService.get('GOOGLE_CLIENT_SECRET') ? '‚úîÔ∏è Configurado' : '‚ùå Ausente'}`,
    );
  }
}

/**Sugest√µes de Melhoria (Para Implementar):
Suporte a M√∫ltiplos Ambientes:

Adicione suporte para diferentes arquivos .env com base no ambiente.

typescript
Copy
envFilePath: `.env.${process.env.NODE_ENV || 'development'}`,
M√≥dulos Adicionais:

Adicione outros m√≥dulos conforme necess√°rio (por exemplo, UsersModule, DatabaseModule).

typescript
Copy
imports: [ConfigModule.forRoot({ isGlobal: true }), AuthModule, UsersModule],
Documenta√ß√£o com Swagger:

Adicione o SwaggerModule para documentar a API.

typescript
Copy
import { SwaggerModule } from '@nestjs/swagger';

@Module({
  imports: [ConfigModule.forRoot({ isGlobal: true }), AuthModule, SwaggerModule],
})
Tratamento de Erros Global:

Adicione um filtro de exce√ß√µes global para capturar e tratar erros.

typescript
Copy
import { APP_FILTER } from '@nestjs/core';
import { HttpExceptionFilter } from './common/filters/http-exception.filter';

@Module({
  providers: [
    {
      provide: APP_FILTER,
      useClass: HttpExceptionFilter,
    },
  ],
})
Testes Automatizados:

Adicione testes de integra√ß√£o para garantir que o m√≥dulo funcione corretamente.

typescript
Copy
describe('AppModule', () => {
  it('deve carregar o m√≥dulo corretamente', () => {
    const module = new AppModule();
    expect(module).toBeDefined();
  });
});
Seguran√ßa:

Adicione prote√ß√£o contra ataques comuns (por exemplo, CORS, rate limiting).

typescript
Copy
import { ThrottlerModule } from '@nestjs/throttler';

@Module({
  imports: [
    ConfigModule.forRoot({ isGlobal: true }),
    ThrottlerModule.forRoot({ ttl: 60, limit: 10 }), // Limita a 10 requisi√ß√µes por minuto.
    AuthModule,
  ],
})
Monitoramento:

Adicione suporte para ferramentas de monitoramento (por exemplo, Prometheus, New Relic).

typescript
Copy
import { PrometheusModule } from '@willsoto/nestjs-prometheus';

@Module({
  imports: [ConfigModule.forRoot({ isGlobal: true }), AuthModule, PrometheusModule],
})
Exemplo de Sa√≠da de Logs:
Copy
üöÄ M√≥dulo principal da aplica√ß√£o carregado com sucesso! */
