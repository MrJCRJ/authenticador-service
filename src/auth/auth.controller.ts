// src/auth/auth.controller.ts
import { Controller, Get, Req, UseGuards, Res } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { JwtGuard } from './guards/jwt.guard';
import { AuthService } from './auth.service';
import { Logger } from '@nestjs/common';

@Controller('auth')
export class AuthController {
  // Logger personalizado com emojis para logs divertidos e intuitivos üéâ
  private readonly logger = new Logger(AuthController.name);

  constructor(private readonly authService: AuthService) {}

  /**
   * Rota de autentica√ß√£o via Google.
   * Redireciona o usu√°rio para a p√°gina de login do Google automaticamente.
   */
  @Get('google')
  @UseGuards(AuthGuard('google'))
  async googleAuth() {
    // Log divertido: in√≠cio do processo de autentica√ß√£o
    this.logger.log('üîë Iniciando autentica√ß√£o via Google...');
    // N√£o √© necess√°ria implementa√ß√£o - o AuthGuard cuida do redirecionamento!
  }

  /**
   * Callback da autentica√ß√£o Google.
   * Gera um token JWT, define um cookie seguro e redireciona para o perfil.
   */
  @Get('google/callback')
  @UseGuards(AuthGuard('google'))
  async googleAuthRedirect(@Req() req, @Res() res) {
    // Log intuitivo: processo de callback iniciado
    this.logger.log('üîÑ Processando callback do Google...');

    // Sugest√£o de melhoria: Validar se o usu√°rio existe antes de gerar o token
    if (!req.user) {
      this.logger.error('‚ùå Nenhum usu√°rio retornado pelo Google');
      return res.redirect('/auth/error');
    }

    const user = req.user;
    // Gera o token JWT com dados do usu√°rio
    const token = this.authService.generateToken(user);

    // Log divertido: token gerado (‚ö†Ô∏è cuidado com logs sens√≠veis em produ√ß√£o!)
    this.logger.log(
      `üé´ Token JWT gerado: ${token.slice(0, 15)}... (truncado por seguran√ßa)`,
    );

    // Configura√ß√µes seguras para o cookie
    const cookieOptions = {
      httpOnly: true, // Blinda contra ataques XSS
      secure: process.env.NODE_ENV === 'production', // HTTPS apenas em produ√ß√£o
      sameSite: 'strict' as const, // Prote√ß√£o contra CSRF
      maxAge: 3600000, // 1 hora de validade
      path: '/', // Dispon√≠vel em todas as rotas
    };

    // Define o cookie JWT na resposta
    res.cookie('jwt', token, cookieOptions);
    this.logger.log('üç™ Cookie JWT definido com sucesso!');

    // Sugest√£o de melhoria: Evitar token na URL por seguran√ßa
    // Redireciona para o perfil usando apenas o cookie
    res.redirect('/auth/profile');
  }
}
/** Sugest√µes de Melhoria (Comentadas no C√≥digo):
    Rota do perfil do usu√°rio autenticado.
    Requer autentica√ß√£o JWT v√°lida.

  @Get('profile')
  @UseGuards(JwtGuard))
  getProfile(@Req() req) {
     Log intuitivo com dados mascarados por seguran√ßa
    this.logger.log(`üë§ Acesso ao perfil: ${req.user.email.replace(/(?<=.).(?=.*@)/g, '*')}`);
    this.logger.debug(`üìä Dados completos do usu√°rio: ${JSON.stringify(req.user)}`);

    return req.user;
  

   Sugest√£o de melhoria: Adicionar endpoint de logout
   @Get('logout')
   logout(@Res() res) {
    res.clearCookie('jwt');
     this.logger.log('üö™ Usu√°rio deslogado com sucesso');
     return res.redirect('/');
   
     Sugest√µes de Melhoria (Para Implementar):
Valida√ß√£o de Dados do Usu√°rio

typescript
Copy
// Antes de gerar o token:
// if (!this.authService.isValidUser(user)) {
//   this.logger.warn(`Tentativa de login com usu√°rio inv√°lido: ${user.email}`);
//   throw new UnauthorizedException('Usu√°rio n√£o autorizado');
// }
Monitoramento de Atividade

typescript
Copy
// Ap√≥s o login bem-sucedido:
// this.authService.trackLoginActivity(user.id, req.ip);
Tokens de Atualiza√ß√£o

typescript
Copy
// Gerar refresh token junto com o access token:
// const { accessToken, refreshToken } = this.authService.generateTokens(user);
// res.cookie('refreshToken', refreshToken, { ... });
Prote√ß√£o Contra Flood

typescript
Copy
// Adicionar decorador de rate limiting:
// @Throttle({ default: { limit: 5, ttl: 30000 } })
Tratamento de Erros Global

typescript
Copy
// Adicionar filtro de exce√ß√µes personalizado:
// @UseFilters(new AuthExceptionFilter())


Exemplo de Sa√≠da de Logs:
Copy
üîë Iniciando autentica√ß√£o via Google...
üîÑ Processando callback do Google...
üé´ Token JWT gerado: eyJhbGciOiJIUzI1NiIs... (truncado por seguran√ßa)
üç™ Cookie JWT definido com sucesso!
üë§ Acesso ao perfil: j****@gmail.com

  */
