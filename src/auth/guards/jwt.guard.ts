// src/auth/guards/jwt.guard.ts
import {
  Injectable,
  ExecutionContext,
  Logger,
  UnauthorizedException,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import * as jwt from 'jsonwebtoken';

interface JwtPayloadWithExp extends jwt.JwtPayload {
  exp: number;
}

@Injectable()
export class JwtGuard extends AuthGuard('jwt') {
  private readonly logger = new Logger(JwtGuard.name);
  private readonly tokenCache = new Map<string, boolean>();
  private readonly cookieKey = process.env.JWT_COOKIE_KEY || 'jwt';
  private readonly customHeader =
    process.env.JWT_CUSTOM_HEADER || 'x-custom-token';

  canActivate(context: ExecutionContext) {
    const request = context.switchToHttp().getRequest();

    try {
      const token = this.extractTokenFromRequest(request);
      this.logStructuredTokenInfo(token, request);

      if (!token) {
        this.logger.warn(
          '‚ö†Ô∏è Nenhum token JWT encontrado nas fontes dispon√≠veis.',
        );
        throw new UnauthorizedException('Token de autentica√ß√£o n√£o fornecido.');
      }

      this.validateTokenBasic(token);
      this.validateTokenFormat(token);

      if (this.tokenCache.has(token)) {
        this.logger.debug('‚ôªÔ∏è Token encontrado no cache - autentica√ß√£o r√°pida');
        return true;
      }

      request.headers['authorization'] = `Bearer ${token}`;
      this.logger.log(
        `üîë Token JWT definido no header: Bearer ${token.substring(0, 15)}...`,
      );

      const result = super.canActivate(context);

      if (result) {
        this.tokenCache.set(token, true);
      }

      return result;
    } catch (error) {
      this.logger.error(`üí• Erro durante a autentica√ß√£o: ${error}`);
      throw new UnauthorizedException(error || 'Falha na autentica√ß√£o');
    }
  }

  private extractTokenFromRequest(request: any): string | undefined {
    return (
      request.query?.token ||
      request.cookies?.[this.cookieKey] ||
      request.body?.token ||
      request.headers[this.customHeader] ||
      request.headers?.authorization?.split(' ')[1]
    );
  }

  private validateTokenBasic(token: string): void {
    if (typeof token !== 'string' || token.trim() === '') {
      this.logger.error('‚ùå Token inv√°lido: deve ser uma string n√£o vazia.');
      throw new UnauthorizedException('Token JWT inv√°lido.');
    }
  }

  private validateTokenFormat(token: string): void {
    const parts = token.split('.');
    if (parts.length !== 3) {
      this.logger.error(
        '‚ùå Formato do token JWT inv√°lido (deveria ser header.payload.signature).',
      );
      throw new UnauthorizedException('Formato do token inv√°lido.');
    }

    try {
      const decoded = jwt.decode(token);

      if (!decoded) {
        throw new UnauthorizedException('Token JWT n√£o p√¥de ser decodificado.');
      }

      // Verifica√ß√£o segura da expira√ß√£o
      if (typeof decoded === 'object' && 'exp' in decoded) {
        const payload = decoded as JwtPayloadWithExp;
        if (payload.exp && payload.exp < Date.now() / 1000) {
          this.logger.error('‚ùå Token JWT expirado.');
          throw new UnauthorizedException('Token expirado.');
        }
      }
    } catch (error) {
      this.logger.error(`‚ùå Falha na decodifica√ß√£o do token: ${error}`);
      throw new UnauthorizedException('Token JWT inv√°lido.');
    }
  }

  private logStructuredTokenInfo(
    token: string | undefined,
    request: any,
  ): void {
    let source = 'n√£o encontrado';
    if (token) {
      if (request.query?.token) source = 'URL';
      else if (request.cookies?.[this.cookieKey]) source = 'Cookie';
      else if (request.body?.token) source = 'Body';
      else if (request.headers[this.customHeader])
        source = `Header ${this.customHeader}`;
      else if (request.headers?.authorization) source = 'Header Authorization';
    }

    this.logger.debug({
      message: 'Informa√ß√µes do Token JWT',
      tokenPresent: !!token,
      tokenSource: source,
      tokenPrefix: token ? token.substring(0, 5) + '...' : null,
      timestamp: new Date().toISOString(),
    });
  }
}

/**Pr√≥ximas Melhorias Poss√≠veis:
Blacklist de Tokens - Para implementar logout

Rate Limiting - Prevenir abuso

Cache com TTL - Limpar tokens expirados do cache

Health Check - Verificar integridade do guard

Testes Automatizados - Unit√°rios e de integra√ß√£o */
