// src/auth/guards/jwt.guard.ts
import { Injectable, ExecutionContext, Logger } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtGuard extends AuthGuard('jwt') {
  // Logger personalizado para o JwtGuard, com um toque divertido!
  private readonly logger = new Logger(JwtGuard.name);

  canActivate(context: ExecutionContext) {
    // Obt√©m o objeto de requisi√ß√£o HTTP do contexto.
    const request = context.switchToHttp().getRequest();

    // Log divertido: mostra todos os cookies recebidos na requisi√ß√£o.
    this.logger.log(`üç™ Cookies recebidos: ${JSON.stringify(request.cookies)}`);

    // Tenta obter o token JWT de duas fontes:
    // 1. Par√¢metro de consulta (query parameter) da URL.
    // 2. Cookie 'jwt' da requisi√ß√£o.
    const tokenFromUrl = request.query.token; // Token da URL.
    const tokenFromCookie = request.cookies?.jwt; // Token do cookie.

    // Prioriza o token da URL, caso exista. Caso contr√°rio, usa o token do cookie.
    const token = tokenFromUrl || tokenFromCookie;

    // Log intuitivo: verifica se um token foi encontrado.
    this.logger.log(
      `üîç Token JWT encontrado? ${!!token ? 'Sim! üéâ' : 'N√£o... üò¢'}`,
    );

    if (token) {
      // Valida√ß√£o b√°sica do token: verifica se √© uma string n√£o vazia.
      // Sugest√£o de melhoria: Adicionar valida√ß√£o do formato do token JWT (header.payload.signature).
      if (typeof token !== 'string' || token.trim() === '') {
        this.logger.error(
          '‚ùå Token JWT inv√°lido: o token est√° vazio ou n√£o √© uma string v√°lida.',
        );
        return false; // Impede a ativa√ß√£o do guard se o token for inv√°lido.
      }

      // Log divertido: exibe o token JWT extra√≠do.
      this.logger.log(`üîë Token JWT extra√≠do: ${token}`);

      // Define o token no cabe√ßalho 'Authorization' no formato 'Bearer <token>'.
      request.headers['authorization'] = `Bearer ${token}`;

      // Log intuitivo: confirma que o token foi adicionado ao cabe√ßalho.
      this.logger.log(
        `üì§ Token JWT adicionado ao cabe√ßalho 'Authorization': Bearer ${token}`,
      );
    } else {
      // Log de aviso: nenhum token JWT foi encontrado.
      this.logger.warn('‚ö†Ô∏è Nenhum token JWT encontrado na URL ou nos cookies.');
    }

    // Chama o m√©todo canActivate da classe pai (AuthGuard) para continuar o processo de autentica√ß√£o.
    return super.canActivate(context);
  }
}

/** Sugest√µes de Melhorias Incorporadas como Coment√°rios:
//
Valida√ß√£o do Formato do Token JWT:

Adicione uma valida√ß√£o para garantir que o token est√° no formato correto (header.payload.signature).

typescript
Copy
// Sugest√£o de melhoria: Adicionar valida√ß√£o do formato do token JWT.
const tokenParts = token.split('.');
if (tokenParts.length !== 3) {
  this.logger.error('‚ùå Token JWT inv√°lido: o token n√£o est√° no formato esperado (header.payload.signature).');
  return false;
}
Suporte a M√∫ltiplas Fontes de Token:

Adicione suporte para tokens enviados no corpo da requisi√ß√£o (body) ou em cabe√ßalhos personalizados.

typescript
Copy
// Sugest√£o de melhoria: Adicionar suporte para tokens no corpo da requisi√ß√£o ou em cabe√ßalhos personalizados.
const tokenFromBody = request.body?.token;
const tokenFromHeader = request.headers['x-custom-token'];
const token = tokenFromUrl || tokenFromCookie || tokenFromBody || tokenFromHeader;
Logs Estruturados:

Use logs estruturados para facilitar a an√°lise em ferramentas de monitoramento.

typescript
Copy
// Sugest√£o de melhoria: Usar logs estruturados para melhorar a an√°lise.
this.logger.log({
  message: 'Token JWT extra√≠do',
  token: token,
  source: tokenFromUrl ? 'URL' : tokenFromCookie ? 'Cookie' : 'Outro',
});
Tratamento de Erros:

Adicione um bloco try-catch para capturar e tratar poss√≠veis erros durante a execu√ß√£o do m√©todo canActivate.

typescript
Copy
// Sugest√£o de melhoria: Adicionar tratamento de erros.
try {
  return super.canActivate(context);
} catch (error) {
  this.logger.error(`üí• Erro durante a ativa√ß√£o do guard: ${error.message}`);
  return false;
}
Configura√ß√£o Din√¢mica:

Permita que a chave do cookie (atualmente jwt) seja configur√°vel via vari√°veis de ambiente.

typescript
Copy
// Sugest√£o de melhoria: Tornar a chave do cookie configur√°vel.
const cookieKey = process.env.JWT_COOKIE_KEY || 'jwt';
const tokenFromCookie = request.cookies?.[cookieKey];
Cache de Tokens:

Implemente um cache de tokens v√°lidos para melhorar o desempenho.

typescript
Copy
// Sugest√£o de melhoria: Implementar cache de tokens v√°lidos.
if (this.tokenCache.has(token)) {
  return true; // Token j√° validado e cacheado.
}
Documenta√ß√£o:

Adicione uma documenta√ß√£o clara usando JSDoc.

typescript
Copy
/**
 * Guard para autentica√ß√£o JWT.
 * Este guard extrai o token JWT da URL, cookies ou outras fontes e o adiciona ao cabe√ßalho 'Authorization'.

@Injectable()
export class JwtGuard extends AuthGuard('jwt') {
  // ...
}
Testes Automatizados:

Escreva testes unit√°rios e de integra√ß√£o para garantir que o guard funcione corretamente.

typescript
Copy
// Sugest√£o de melhoria: Escrever testes automatizados para diferentes cen√°rios.
// Exemplo: Testar com token v√°lido, token inv√°lido, token ausente, etc.
Seguran√ßa Adicional:

Adicione verifica√ß√µes de expira√ß√£o do token e valida√ß√£o da assinatura.

typescript
Copy
// Sugest√£o de melhoria: Validar expira√ß√£o e assinatura do token.
const decodedToken = jwt.decode(token, { complete: true });
if (decodedToken.payload.exp < Date.now() / 1000) {
  this.logger.error('‚ùå Token JWT expirado.');
  return false;
}
Refatora√ß√£o para Reutiliza√ß√£o:

Extraia a l√≥gica de extra√ß√£o e valida√ß√£o do token para um servi√ßo separado.

typescript
Copy
// Sugest√£o de melhoria: Extrair l√≥gica de token para um servi√ßo reutiliz√°vel.
const tokenService = new TokenService();
const token = tokenService.extractToken(request);
*/
