// src/auth/strategies/jwt.strategy.ts
import { Injectable, Logger } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { ConfigService } from '@nestjs/config';

interface JwtPayload {
  sub: string;
  email: string;
  name?: string;
  picture?: string;
  // Adicione outros campos do payload conforme necess√°rio
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {
  private readonly logger = new Logger(JwtStrategy.name);

  constructor(configService: ConfigService) {
    super({
      jwtFromRequest: ExtractJwt.fromExtractors([
        ExtractJwt.fromAuthHeaderAsBearerToken(),
        ExtractJwt.fromUrlQueryParameter('token'),
        (req) => req?.cookies?.jwt, // Para tokens em cookies
      ]),
      ignoreExpiration: false,
      secretOrKey: configService.get<string>('JWT_SECRET'),
      audience: configService.get<string>('JWT_AUDIENCE'),
      issuer: configService.get<string>('JWT_ISSUER'),
    });

    this.logger.log('üîê Estrat√©gia JWT configurada com sucesso!');
  }

  async validate(payload: JwtPayload) {
    // Valida√ß√£o b√°sica do payload
    if (!payload.sub || !payload.email) {
      this.logger.error('‚ùå Payload JWT inv√°lido: faltam campos obrigat√≥rios');
      throw new Error('Payload JWT inv√°lido');
    }

    this.logger.debug(
      `üìÑ Payload JWT decodificado: ${JSON.stringify(payload)}`,
    );
    this.logger.log(
      `üë§ Usu√°rio autenticado: ${payload.email.replace(/(?<=.).(?=.*@)/g, '*')}`,
    );

    return {
      userId: payload.sub,
      email: payload.email,
      name: payload.name,
      picture: payload.picture,
      // Adicione apenas os campos necess√°rios para a aplica√ß√£o
    };
  }
}

/**Sugest√µes de Melhorias (Comentadas no C√≥digo):
Valida√ß√£o de Payload:

Adicione uma verifica√ß√£o para garantir que o payload cont√©m os campos necess√°rios.

typescript
Copy
if (!payload.sub || !payload.email) {
  this.logger.error('‚ùå Payload do token JWT incompleto ou inv√°lido.');
  throw new Error('Payload do token inv√°lido');
}
Tipagem do Payload:

Crie uma interface ou tipo para o payload do token JWT, evitando o uso de any.

typescript
Copy
interface JwtPayload {
  sub: string; // ID do usu√°rio.
  email: string; // E-mail do usu√°rio.
}

async validate(payload: JwtPayload) {
  // ...
}
Logs Estruturados:

Use logs estruturados (em formato JSON) para facilitar a an√°lise em ferramentas de monitoramento.

typescript
Copy
this.logger.log({
  message: 'Payload do token JWT',
  payload: {
    userId: payload.sub,
    email: payload.email,
  },
});
Tratamento de Erros:

Adicione um bloco try-catch para capturar e tratar poss√≠veis erros durante a valida√ß√£o.

typescript
Copy
try {
  // Processo de valida√ß√£o...
} catch (error) {
  this.logger.error(`üí• Erro durante a valida√ß√£o do token JWT: ${error.message}`);
  throw error;
}
Configura√ß√£o Din√¢mica:

Permita que a chave secreta (secretOrKey) e outras op√ß√µes sejam configuradas dinamicamente via vari√°veis de ambiente.

typescript
Copy
super({
  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
  ignoreExpiration: configService.get<boolean>('JWT_IGNORE_EXPIRATION', false),
  secretOrKey: configService.get<string>('JWT_SECRET'),
});
Testes Automatizados:

Escreva testes unit√°rios e de integra√ß√£o para garantir que a estrat√©gia funcione corretamente em diferentes cen√°rios.

Documenta√ß√£o:

Adicione uma documenta√ß√£o clara usando JSDoc para explicar o prop√≥sito da estrat√©gia e como ela deve ser usada.

 */
