// src/auth/strategies/google.strategy.ts
import { Injectable, Logger } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, VerifyCallback } from 'passport-google-oauth20';

@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
  private readonly logger = new Logger(GoogleStrategy.name);

  constructor() {
    super({
      clientID: process.env.GOOGLE_CLIENT_ID, // ID do cliente Google.
      clientSecret: process.env.GOOGLE_CLIENT_SECRET, // Segredo do cliente Google.
      callbackURL: process.env.GOOGLE_CALLBACK_URL, // URL de callback ap√≥s a autentica√ß√£o.
      scope: ['email', 'profile'], // Escopos solicitados ao Google.
      passReqToCallback: true, // Passa a requisi√ß√£o para o m√©todo `validate`.
      state: true, // Habilita o uso de par√¢metros personalizados.
      proxy: true, // Habilita o suporte a proxies reversos.
    });

    this.logger.log('üöÄ Estrat√©gia Google configurada com sucesso!');
  }

  async validate(
    req: any, // A requisi√ß√£o √© passada gra√ßas ao `passReqToCallback`.
    accessToken: string,
    refreshToken: string,
    profile: any,
    done: VerifyCallback,
  ): Promise<any> {
    this.logger.log('üîç Validando usu√°rio autenticado via Google...');

    if (!profile || !accessToken) {
      console.log('‚ùå Falha na autentica√ß√£o do Google!');
      return done(new Error('Falha na autentica√ß√£o do Google'), false);
    }

    const { name, emails, photos } = profile;

    const user = {
      email: emails[0].value,
      name: name.givenName,
      picture: photos[0].value,
      accessToken,
    };

    this.logger.log(`üë§ Usu√°rio autenticado: ${user.name} (${user.email})`);
    this.logger.log(`üì∏ Foto do usu√°rio: ${user.picture}`);

    done(null, user);

    this.logger.log('‚úÖ Valida√ß√£o do usu√°rio conclu√≠da com sucesso!');
  }
}

/**Sugest√µes de Melhorias (Comentadas no C√≥digo):
Valida√ß√£o de Dados do Perfil:

Adicione uma verifica√ß√£o para garantir que os campos emails, name e photos est√£o presentes no perfil.

typescript
Copy
if (!emails || !name || !photos) {
  this.logger.error('‚ùå Dados do perfil do Google incompletos.');
  done(new Error('Dados do perfil incompletos'), null);
  return;
}
Suporte a Refresh Token:

Se necess√°rio, voc√™ pode armazenar o refreshToken para renovar o accessToken quando ele expirar.

typescript
Copy
const user = {
  email: emails[0].value,
  name: name.givenName,
  picture: photos[0].value,
  accessToken,
  refreshToken, // Adiciona o refreshToken ao objeto do usu√°rio.
};
Logs Estruturados:

Use logs estruturados (em formato JSON) para facilitar a an√°lise em ferramentas de monitoramento.

typescript
Copy
this.logger.log({
  message: 'Usu√°rio autenticado via Google',
  user: {
    email: user.email,
    name: user.name,
    picture: user.picture,
  },
});
Tratamento de Erros:

Adicione um bloco try-catch para capturar e tratar poss√≠veis erros durante a valida√ß√£o.

typescript
Copy
try {
  // Processo de valida√ß√£o...
} catch (error) {
  this.logger.error(`üí• Erro durante a valida√ß√£o do usu√°rio: ${error.message}`);
  done(error, null);
}
Configura√ß√£o Din√¢mica:

Permita que os escopos (scope) sejam configurados dinamicamente via vari√°veis de ambiente.

typescript
Copy
scope: process.env.GOOGLE_SCOPES?.split(',') || ['email', 'profile'],
Testes Automatizados:

Escreva testes unit√°rios e de integra√ß√£o para garantir que a estrat√©gia funcione corretamente em diferentes cen√°rios.

Documenta√ß√£o:

Adicione uma documenta√ß√£o clara usando JSDoc para explicar o prop√≥sito da estrat√©gia e como ela deve ser usada. */
