// src/auth/strategies/google.strategy.ts

// Importa o decorador `Injectable` do pacote @nestjs/common, que permite que a classe seja injetada como um provedor.
import { Injectable, Logger } from '@nestjs/common';

// Importa a classe `PassportStrategy` do pacote @nestjs/passport, que √© usada para criar estrat√©gias de autentica√ß√£o.
import { PassportStrategy } from '@nestjs/passport';

// Importa a estrat√©gia `Strategy` e o tipo `VerifyCallback` do pacote passport-google-oauth20.
// `Strategy` √© a implementa√ß√£o da estrat√©gia de autentica√ß√£o OAuth2 do Google.
// `VerifyCallback` √© uma fun√ß√£o de callback que recebe os dados do usu√°rio ap√≥s a autentica√ß√£o.
import { Strategy, VerifyCallback } from 'passport-google-oauth20';

// Define a classe `GoogleStrategy` como uma estrat√©gia de autentica√ß√£o usando o Passport.
// O decorador `@Injectable` permite que esta classe seja injetada em outros componentes do NestJS.
@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
  // Logger personalizado para o GoogleStrategy, com um toque divertido!
  private readonly logger = new Logger(GoogleStrategy.name);

  constructor() {
    // Chama o construtor da classe pai (`PassportStrategy`) para configurar a estrat√©gia do Google.
    super({
      clientID: process.env.GOOGLE_CLIENT_ID, // ID do cliente Google (obtido do ambiente).
      clientSecret: process.env.GOOGLE_CLIENT_SECRET, // Segredo do cliente Google (obtido do ambiente).
      callbackURL: process.env.GOOGLE_CALLBACK_URL, // URL de callback ap√≥s a autentica√ß√£o no Google.
      scope: ['email', 'profile'], // Escopos solicitados ao Google (email e perfil do usu√°rio).
    });

    // Log divertido: confirma que a estrat√©gia Google foi configurada com sucesso.
    this.logger.log('üöÄ Estrat√©gia Google configurada com sucesso!');
  }

  /**
   * M√©todo `validate` chamado ap√≥s a autentica√ß√£o bem-sucedida no Google.
   * Este m√©todo recebe os dados do usu√°rio e os processa antes de retorn√°-los ao controlador.
   *
   * @param accessToken - O token de acesso gerado pelo Google.
   * @param refreshToken - O token de atualiza√ß√£o (n√£o utilizado neste exemplo).
   * @param profile - O perfil do usu√°rio retornado pelo Google.
   * @param done - A fun√ß√£o de callback que deve ser chamada com os dados do usu√°rio ou um erro.
   * @returns Retorna os dados do usu√°rio autenticado.
   */
  async validate(
    accessToken: string,
    refreshToken: string,
    profile: any,
    done: VerifyCallback,
  ): Promise<any> {
    // Log intuitivo: inicia o processo de valida√ß√£o do usu√°rio.
    this.logger.log('üîç Validando usu√°rio autenticado via Google...');

    // Extrai informa√ß√µes relevantes do perfil do usu√°rio.
    const { name, emails, photos } = profile;

    // Cria um objeto de usu√°rio com os dados necess√°rios.
    const user = {
      email: emails[0].value, // E-mail do usu√°rio.
      name: name.givenName, // Nome do usu√°rio.
      picture: photos[0].value, // URL da foto do usu√°rio.
      accessToken, // Token de acesso gerado pelo Google.
    };

    // Log divertido: exibe os dados do usu√°rio extra√≠dos.
    this.logger.log(`üë§ Usu√°rio autenticado: ${user.name} (${user.email})`);
    this.logger.log(`üì∏ Foto do usu√°rio: ${user.picture}`);

    // Chama a fun√ß√£o de callback `done` para retornar os dados do usu√°rio ao controlador.
    done(null, user);

    // Log intuitivo: confirma que a valida√ß√£o foi conclu√≠da com sucesso.
    this.logger.log('‚úÖ Valida√ß√£o do usu√°rio conclu√≠da com sucesso!');
  }
}

/**Sugest√µes de Melhorias (Comentadas no C√≥digo):
Valida√ß√£o de Dados do Perfil:

Adicione uma verifica√ß√£o para garantir que os campos emails, name e photos est√£o presentes no perfil.

typescript
Copy
if (!emails || !name || !photos) {
  this.logger.error('‚ùå Dados do perfil do Google incompletos.');
  done(new Error('Dados do perfil incompletos'), null);
  return;
}
Suporte a Refresh Token:

Se necess√°rio, voc√™ pode armazenar o refreshToken para renovar o accessToken quando ele expirar.

typescript
Copy
const user = {
  email: emails[0].value,
  name: name.givenName,
  picture: photos[0].value,
  accessToken,
  refreshToken, // Adiciona o refreshToken ao objeto do usu√°rio.
};
Logs Estruturados:

Use logs estruturados (em formato JSON) para facilitar a an√°lise em ferramentas de monitoramento.

typescript
Copy
this.logger.log({
  message: 'Usu√°rio autenticado via Google',
  user: {
    email: user.email,
    name: user.name,
    picture: user.picture,
  },
});
Tratamento de Erros:

Adicione um bloco try-catch para capturar e tratar poss√≠veis erros durante a valida√ß√£o.

typescript
Copy
try {
  // Processo de valida√ß√£o...
} catch (error) {
  this.logger.error(`üí• Erro durante a valida√ß√£o do usu√°rio: ${error.message}`);
  done(error, null);
}
Configura√ß√£o Din√¢mica:

Permita que os escopos (scope) sejam configurados dinamicamente via vari√°veis de ambiente.

typescript
Copy
scope: process.env.GOOGLE_SCOPES?.split(',') || ['email', 'profile'],
Testes Automatizados:

Escreva testes unit√°rios e de integra√ß√£o para garantir que a estrat√©gia funcione corretamente em diferentes cen√°rios.

Documenta√ß√£o:

Adicione uma documenta√ß√£o clara usando JSDoc para explicar o prop√≥sito da estrat√©gia e como ela deve ser usada. */
