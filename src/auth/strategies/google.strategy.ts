// src/auth/strategies/google.strategy.ts
import { Injectable, Logger } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, VerifyCallback } from 'passport-google-oauth20';
import { ConfigService } from '@nestjs/config';
import { Request } from 'express';

interface GoogleProfile {
  id: string;
  emails: { value: string; verified: boolean }[];
  displayName?: string;
  name?: { givenName?: string; familyName?: string };
  photos?: { value: string }[];
  _json?: {
    locale?: string;
  };
}

@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
  private readonly logger = new Logger(GoogleStrategy.name);

  constructor(configService: ConfigService) {
    super({
      clientID: configService.getOrThrow('GOOGLE_CLIENT_ID'),
      clientSecret: configService.getOrThrow('GOOGLE_CLIENT_SECRET'),
      callbackURL: configService.getOrThrow('GOOGLE_CALLBACK_URL'),
      scope: configService.get('GOOGLE_SCOPES')?.split(',') || [
        'email',
        'profile',
      ],
      passReqToCallback: true,
    });
  }

  /**
   * Valida o perfil do usu√°rio autenticado via Google OAuth
   * @param req Objeto de requisi√ß√£o HTTP
   * @param accessToken Token de acesso do Google
   * @param refreshToken Token de atualiza√ß√£o do Google
   * @param profile Perfil do usu√°rio retornado pelo Google
   * @param done Callback do Passport
   * @returns Objeto com dados do usu√°rio ou erro
   */
  async validate(
    req: Request,
    accessToken: string,
    refreshToken: string,
    profile: GoogleProfile,
    done: VerifyCallback,
  ): Promise<any> {
    try {
      // 1Ô∏è‚É£ Valida√ß√£o do par√¢metro state (para prote√ß√£o CSRF)
      const state = req.query.state;
      if (!state) {
        throw new Error('Par√¢metro state √© obrigat√≥rio para prote√ß√£o CSRF');
      }

      // 2Ô∏è‚É£ Valida√ß√£o dos dados do perfil
      if (!profile.emails || !profile.emails.length) {
        throw new Error('Perfil do Google n√£o cont√©m informa√ß√µes de email');
      }

      const primaryEmail = profile.emails[0];
      if (!primaryEmail.verified) {
        throw new Error('Email do Google n√£o verificado');
      }

      // 3Ô∏è‚É£ Constru√ß√£o do objeto do usu√°rio
      const user = {
        provider: 'google',
        providerId: profile.id,
        email: primaryEmail.value,
        name:
          profile.displayName || profile.name?.givenName || 'Usu√°rio Google',
        picture: profile.photos?.[0]?.value || null,
        locale: profile._json?.locale || 'pt-BR',
        accessToken,
        refreshToken, // Inclu√≠do para poss√≠veis renova√ß√µes de token
      };

      // 4Ô∏è‚É£ Log estruturado
      this.logStructuredAuthInfo(user, req);

      // 5Ô∏è‚É£ Retorno do usu√°rio autenticado
      done(null, user);
    } catch (error) {
      this.logger.error(`üí• Falha na autentica√ß√£o com Google: ${error}`);
      done(error, null);
    }
  }

  /**
   * Registra informa√ß√µes estruturadas sobre a autentica√ß√£o
   * @param user Dados do usu√°rio autenticado
   * @param req Objeto de requisi√ß√£o HTTP
   */
  private logStructuredAuthInfo(user: any, req: Request): void {
    this.logger.log({
      message: 'Autentica√ß√£o via Google realizada com sucesso',
      user: {
        id: user.providerId,
        email: user.email,
        name: user.name,
      },
      request: {
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        timestamp: new Date().toISOString(),
      },
    });
  }
}

/**Pr√≥ximas Melhorias Poss√≠veis:
Armazenamento de Refresh Token:

Implementar l√≥gica para renova√ß√£o autom√°tica de tokens

Testes Automatizados:

Mock do Passport e Google OAuth para testes

M√©tricas:

Integra√ß√£o com sistemas de monitoramento

Customiza√ß√£o:

Permitir mapeamento customizado de campos do perfil */
