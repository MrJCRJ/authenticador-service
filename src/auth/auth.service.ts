// src/auth/auth.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  // Logger personalizado para o AuthService, com emojis para logs divertidos e intuitivos üéâ
  private readonly logger = new Logger(AuthService.name);

  constructor(private readonly jwtService: JwtService) {}

  /**
   * Gera um token JWT com base nos dados do usu√°rio.
   *
   * @param user - Objeto contendo informa√ß√µes do usu√°rio (email e nome).
   * @returns Token JWT assinado.
   */
  generateToken(user: any): string {
    // Cria o payload do token com informa√ß√µes do usu√°rio.
    const payload = { email: user.email, sub: user.name };

    // Log intuitivo: gera√ß√£o do token.
    this.logger.log(`üîê Gerando token JWT para o usu√°rio: ${user.email}`);

    // Gera e retorna o token JWT.
    const token = this.jwtService.sign(payload);

    // Log divertido: token gerado (‚ö†Ô∏è cuidado com logs sens√≠veis em produ√ß√£o!).
    this.logger.log(
      `üé´ Token JWT gerado: ${token.slice(0, 15)}... (truncado por seguran√ßa)`,
    );

    return token;
  }

  /**
   * Valida um token JWT.
   *
   * @param token - Token JWT a ser validado.
   * @returns Payload do token se v√°lido, ou `null` se inv√°lido ou expirado.
   */
  validateToken(token: string): any {
    // Log intuitivo: in√≠cio da valida√ß√£o do token.
    this.logger.log(`üîç Validando token JWT: ${token.slice(0, 15)}...`);

    try {
      // Verifica e decodifica o token.
      const payload = this.jwtService.verify(token);

      // Log divertido: token validado com sucesso.
      this.logger.log(`‚úÖ Token JWT v√°lido para o usu√°rio: ${payload.email}`);

      return payload;
    } catch (error) {
      // Verifica se o erro √© uma inst√¢ncia de Error antes de acessar a propriedade message.
      if (error instanceof Error) {
        // Log de erro: token inv√°lido ou expirado.
        this.logger.error(`‚ùå Falha na valida√ß√£o do token: ${error.message}`);
      } else {
        // Log de erro gen√©rico caso o erro n√£o seja uma inst√¢ncia de Error.
        this.logger.error('‚ùå Falha na valida√ß√£o do token: Erro desconhecido');
      }

      return null; // Retorna null para tokens inv√°lidos ou expirados.
    }
  }
}

/**Sugest√µes de Melhoria (Para Implementar):
Tipagem do Payload:

Crie uma interface para o payload do token JWT, evitando o uso de any.

typescript
Copy
interface JwtPayload {
  email: string;
  sub: string; // ID ou nome do usu√°rio.
}

generateToken(user: { email: string; name: string }): string {
  const payload: JwtPayload = { email: user.email, sub: user.name };
  return this.jwtService.sign(payload);
}
Suporte a Refresh Tokens:

Adicione m√©todos para gerar e validar refresh tokens.

typescript
Copy
generateRefreshToken(user: any): string {
  const payload = { email: user.email, sub: user.name, type: 'refresh' };
  return this.jwtService.sign(payload, { expiresIn: '7d' });
}

validateRefreshToken(token: string): any {
  try {
    return this.jwtService.verify(token);
  } catch (error) {
    return null;
  }
}
Auditoria de Tokens:

Registre a gera√ß√£o e valida√ß√£o de tokens em um sistema de auditoria.

typescript
Copy
generateToken(user: any): string {
  const payload = { email: user.email, sub: user.name };
  const token = this.jwtService.sign(payload);

  // Log de auditoria.
  this.logger.log(`üìù Auditoria: Token gerado para ${user.email}`);
  return token;
}
Configura√ß√£o Din√¢mica:

Use o ConfigService para carregar op√ß√µes de expira√ß√£o e chaves secretas dinamicamente.

typescript
Copy
constructor(
  private readonly jwtService: JwtService,
  private readonly configService: ConfigService,
) {}

generateToken(user: any): string {
  const payload = { email: user.email, sub: user.name };
  return this.jwtService.sign(payload, {
    expiresIn: this.configService.get<string>('JWT_EXPIRES_IN', '1h'),
  });
}
Testes Automatizados:

Adicione testes unit√°rios para garantir que os m√©todos funcionem corretamente.

typescript
Copy
describe('AuthService', () => {
  let authService: AuthService;
  let jwtService: JwtService;

  beforeEach(() => {
    jwtService = new JwtService({ secret: 'test-secret' });
    authService = new AuthService(jwtService);
  });

  it('deve gerar um token JWT v√°lido', () => {
    const token = authService.generateToken({ email: 'test@test.com', name: 'Test' });
    expect(token).toBeDefined();
  });
});
Seguran√ßa:

Adicione valida√ß√µes adicionais para garantir que o payload do token contenha os campos necess√°rios.

typescript
Copy
validateToken(token: string): any {
  try {
    const payload = this.jwtService.verify(token);
    if (!payload.email || !payload.sub) {
      throw new Error('Payload do token inv√°lido');
    }
    return payload;
  } catch (error) {
    return null;
  }
}
Exemplo de Sa√≠da de Logs:
Copy
üîê Gerando token JWT para o usu√°rio: joao@gmail.com
üé´ Token JWT gerado: eyJhbGciOiJIUzI1Ni... (truncado por seguran√ßa)
üîç Validando token JWT: eyJhbGciOiJIUzI1Ni...
‚úÖ Token JWT v√°lido para o usu√°rio: joao@gmail.com
 */
